name: Check Plagiarism

on:
  # Manual trigger option
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check'
        required: false
        type: string
  # Automatic trigger on PRs
  pull_request:
    paths:
      - 'Assignments/Submissions/**'

# Add permissions block
permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      # This special checkout configuration works with forked PRs
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # This is the key fix for forked PRs
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Simple similarity check
            function calculateSimilarity(str1, str2) {
              str1 = str1.replace(/\s+/g, '').toLowerCase();
              str2 = str2.replace(/\s+/g, '').toLowerCase();
              
              if (str1 === str2) return 100;
              if (str1.length === 0 || str2.length === 0) return 0;
              
              let matches = 0;
              const len = Math.min(str1.length, str2.length);
              
              for (let i = 0; i < len; i++) {
                if (str1[i] === str2[i]) matches++;
              }
              
              return Math.round((matches / len) * 100);
            }
            
            // Check submission against others
            function checkSubmission(filePath, submissionsDir) {
              const results = [];
              const content = fs.readFileSync(filePath, 'utf8');
              
              // Get all files in submissions directory recursively
              function getFiles(dir) {
                let results = [];
                const list = fs.readdirSync(dir);
                
                list.forEach(file => {
                  const filePath = path.join(dir, file);
                  const stat = fs.statSync(filePath);
                  
                  if (stat && stat.isDirectory()) {
                    results = results.concat(getFiles(filePath));
                  } else {
                    results.push(filePath);
                  }
                });
                
                return results;
              }
              
              const allFiles = getFiles(submissionsDir);
              
              for (const otherFile of allFiles) {
                // Skip if it's the same file
                if (otherFile === filePath) continue;
                
                // Skip if it's not the right file type
                if (!['.js', '.py', '.html', '.css'].includes(path.extname(otherFile))) continue;
                
                try {
                  const otherContent = fs.readFileSync(otherFile, 'utf8');
                  const similarity = calculateSimilarity(content, otherContent);
                  
                  if (similarity > 90) {
                    results.push({
                      file: path.relative(submissionsDir, otherFile),
                      similarity
                    });
                  }
                } catch (error) {
                  console.error(`Error reading file ${otherFile}: ${error.message}`);
                }
              }
              
              return results;
            }
            
            // Main script
            let prNumber = context.issue.number;
            
            // Handle manual trigger with specified PR number
            if (context.payload.inputs && context.payload.inputs.pr_number) {
              prNumber = parseInt(context.payload.inputs.pr_number);
            }
            
            // Get PR files
            const changedFiles = await github.paginate(
              github.rest.pulls.listFiles,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              }
            );
            
            const submissionFiles = changedFiles
              .filter(file => file.filename.startsWith('Assignments/Submissions/'))
              .map(file => file.filename);
            
            let plagiarismFound = false;
            let comment = '## Plagiarism Check Results\n\n';
            
            for (const file of submissionFiles) {
              const results = checkSubmission(file, 'Assignments/Submissions');
              
              if (results.length > 0) {
                plagiarismFound = true;
                comment += `### ${file}\n`;
                comment += 'High similarity found with:\n';
                results.forEach(result => {
                  comment += `- ${result.file}: ${result.similarity}% similarity\n`;
                });
                comment += '\n';
              }
            }
            
            if (plagiarismFound) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'âœ… No significant code similarity detected'
              });
            }